/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.Application;
import Model.Observation;
import Model.VitalSignHistory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alilovepeach
 */
public class ViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewJPanel
     */
    private Application application;
    DefaultTableModel viewtableModel;
    Observation selectedObservation;

//    
//    public ViewJPanel(Application application) {
//        initComponents();
//    }
//    
    ViewJPanel(Application application) {
        initComponents();
        this.application = application;
        this.viewtableModel = (DefaultTableModel) observationTable.getModel();

        // display the vs
        displayObservations();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldObservationId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldBP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldTemperature1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        updateObservationBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        viewObservationBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("View and Update Vital Sign");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        fieldObservationId.setEnabled(false);
        add(fieldObservationId, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 70, -1));

        jLabel2.setText("ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, -1));
        add(fieldBP, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 70, -1));

        jLabel3.setText("BP");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, -1, -1));
        add(fieldTemperature1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 180, 70, -1));

        jLabel4.setText("Temp");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, -1, -1));

        updateObservationBtn.setText("Update Observation");
        updateObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateObservationBtnActionPerformed(evt);
            }
        });
        add(updateObservationBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, -1, -1));

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temp", "BP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, 290, 230));

        viewObservationBtn.setText("View Details");
        viewObservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationBtnActionPerformed(evt);
            }
        });
        add(viewObservationBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void updateObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateObservationBtnActionPerformed
        // TODO add your handling code here:

        // update the observation object
        if (!fieldObservationId.getText().isEmpty()) {
            // call the findObservation method
            Observation o = this.application.getHistory().findObservation(Integer.valueOf(fieldObservationId.getText()));
            o.setBloodPressure(Double.valueOf(fieldBP.getText()));
            o.setTemperature(Double.valueOf(fieldTemperature1.getText()));
            // or

            //use the selectedObservation member we defined at the top of this class
            this.selectedObservation.setBloodPressure(Double.valueOf(fieldBP.getText()));
            this.selectedObservation.setTemperature(Double.valueOf(fieldTemperature1.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "You have not made any selection");
        }
        displayObservations();
    }//GEN-LAST:event_updateObservationBtnActionPerformed

    private void viewObservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationBtnActionPerformed
        // TODO add your handling code here:

        // what was clicked? get the row in the table that was clicked
        int selectedRow = observationTable.getSelectedRow();

        if (selectedRow >= 0) {

            // we can directly fentch the Observation object from the Zeroth position
            this.selectedObservation = (Observation) observationTable.getValueAt(selectedRow, 0);

            // fill all the text fields
            fieldObservationId.setText(String.valueOf(selectedObservation.getObservationID()));
            fieldBP.setText(String.valueOf(selectedObservation.getBloodPressure()));
            fieldTemperature1.setText(String.valueOf(selectedObservation.getTemperature()));
        } else {
            // no selection made by the user

            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewObservationBtnActionPerformed

    public void displayObservations() {
        VitalSignHistory history = this.application.getHistory();

        if (history.getVitalSignHistory().size() > 0) {
            // displa
            viewtableModel.setRowCount(0);
            for (Observation o : history.getVitalSignHistory()) {
                // num of columns in the table = 3 and row should be framed

                Object row[] = new Object[3];
                row[0] = o;
                row[1] = o.getTemperature();
                row[2] = o.getBloodPressure();

                // add the row to the table
                viewtableModel.addRow(row);
            }
        } else {
            System.out.print("Empty List");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBP;
    private javax.swing.JTextField fieldObservationId;
    private javax.swing.JTextField fieldTemperature1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton updateObservationBtn;
    private javax.swing.JButton viewObservationBtn;
    // End of variables declaration//GEN-END:variables
}
